1. Создай папки (package) по которым разнеси классы. com.alex.departments - > хорошее имя для пакета в котором хранить все классы. Посмотри java application structure в интернете. В какой папке что лежит и т.п.
2. Выбирай более подходящие и говорящие имена для классов/переменных/методов. MRSomething - очень не удачное имя. Если этот класс отвечает за

управление сущностями Employee и Department то можно его назвать вроде EntityManager. Если он у тебя является и сущностью которая содержит поля

емплоера или департмента и управляет сама собой (это как раз твой случай) то разнеси логику на 2 класса. Один класс есть сущностью Емплоеер а второй

класс управляет этой сущнойстью (сохраняет, читает, обновляет и т.д.) -> EmployeeManager к примеру. Так же и к департаменту. Все остальные имена

должны быть упрощены до Department, Employe и т.д. MRDepartmentsAndEmployees -> переименуй в  Application.class
3. Закрывай методы и поля которые не нужны снаружи (private --> MRDepartmentsAndEmployees.saveAll())
4. Архитектура должна быть разбита на абстракции. Сделай абстрактный класс или интерфейс Employee от которого наследуеются Manager и Developer.
5. Каждый класс отвечает за конкретную функциональнось, не смешивай логики в одном классе. Класс который управляет сущностями Department не должен

лезть или знать о сущностях и работе Employee и наоборот.
6. readCommand метод содержит большой if else (плохая практика) который должен быть заменен на switch. к примерку как то так:

        String[] commands = strCmd.split(" ");
        for (String command : commands) {
            switch (command){
                case "EXIT":
                    return false;
                case "HELP":
                    printHelp();
                    break;
                case ...
            }
        }
7.sort methods by their purpose. For example save/update